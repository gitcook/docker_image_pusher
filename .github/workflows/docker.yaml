name: Docker Image Sync

on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]  # 推送到main分支自动触发
  schedule:
    - cron: '00 10 * * *'  # 每天10点自动触发

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  docker-sync:
    name: Sync Docker Images
    runs-on: ubuntu-latest

    steps:
    # 1. 检查磁盘空间
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        df -hT

    # 2. 最大化磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart Docker
      run: sudo service docker restart

    # 3. 再次检查磁盘空间
    - name: After freeing up disk space
      run: df -hT

    # 4. 拉取代码
    - name: Checkout code
      uses: actions/checkout@v4

    # 5. Docker Buildx 设置
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    # 6. 镜像同步任务
    - name: Pull, Tag, and Push Docker Images
      run: |
        # 登录 Aliyun 镜像仓库
        echo "${ALIYUN_REGISTRY_PASSWORD}" | docker login -u "${ALIYUN_REGISTRY_USER}" --password-stdin "${ALIYUN_REGISTRY}"
        
        # 读取 images.txt 文件并处理
        while IFS= read -r image_entry || [ -n "$image_entry" ]; do
            # 忽略空行和注释
            [[ -z "$image_entry" || "$image_entry" =~ ^\s*# ]] && continue

            # 获取镜像完整名称（去掉 @sha256 等后缀）
            full_image_name=$(echo "$image_entry" | awk '{print $NF}')
            full_image_name="${full_image_name%%@*}"
            
            # 解析镜像的命名空间和镜像名:版本号
            image_with_tag=$(echo "$full_image_name" | awk -F'/' '{print $NF}')  # 镜像名:版本号
            namespace=$(echo "$full_image_name" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print "library"}')  # 默认namespace
            image_name=$(echo "$image_with_tag" | awk -F':' '{print $1}')  # 镜像名
            image_tag=$(echo "$image_with_tag" | awk -F':' '{print $2}')  # 版本号

            # 目标镜像名称：<ALIYUN_REGISTRY>/<ALIYUN_NAME_SPACE>/<namespace>_<image_name>:<tag>
            combined_name="${namespace}_${image_name}"
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$combined_name:$image_tag"

            # 拉取、重命名、推送镜像
            echo "Pulling image: $full_image_name"
            docker pull "$full_image_name"

            echo "Tagging image: $new_image"
            docker tag "$full_image_name" "$new_image"

            echo "Pushing image: $new_image"
            docker push "$new_image"

            # 清理本地镜像以节省空间
            echo "Cleaning up local images"
            docker rmi "$full_image_name" "$new_image" || true

        done < images.txt
