name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '00 10 * * *'  # 每天10点自动触发

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        # 登录阿里云容器镜像服务
        echo "$ALIYUN_REGISTRY_PASSWORD" | docker login -u "$ALIYUN_REGISTRY_USER" --password-stdin "$ALIYUN_REGISTRY"
        
        # 创建临时映射来存储命名空间和镜像名的关系
        declare -A namespace_map
        declare -A image_map
        
        # 第一次遍历：收集所有命名空间和镜像名信息
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" ]] && continue
          [[ $line =~ ^\s*# ]] && continue
          
          image=$(echo "$line" | awk '{print $NF}')
          image="${image%%@*}"  # 移除 @sha256 部分
          
          # 如果镜像没有标签，添加默认的 latest 标签
          if [[ ! $image =~ : ]] || [[ $image =~ :$ ]]; then
              image="${image}:latest"
          fi
          
          # 解析镜像信息
          if [[ $image =~ ^([^/]+)/([^/]+)/(.+)$ ]]; then
            namespace="${BASH_REMATCH[2]}"
            image_name="${BASH_REMATCH[3]%%:*}"
            namespace_map[$image_name]="${namespace_map[$image_name]}${namespace}_"
          elif [[ $image =~ ^([^/]+)/(.+)$ ]]; then
            namespace="${BASH_REMATCH[1]}"
            image_name="${BASH_REMATCH[2]%%:*}"
            namespace_map[$image_name]="${namespace_map[$image_name]}${namespace}_"
          else
            namespace="library"
            image_name="${image%%:*}"
            namespace_map[$image_name]="${namespace_map[$image_name]}${namespace}_"
          fi
        done < images.txt
        
        # 第二次遍历：处理和推送镜像
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" ]] && continue
          [[ $line =~ ^\s*# ]] && continue
          
          echo "处理镜像: $line"
          
          # 拉取原始镜像
          docker pull $line
          
          image=$(echo "$line" | awk '{print $NF}')
          image="${image%%@*}"
          
          # 解析镜像信息
          if [[ $image =~ ^([^/]+)/([^/]+)/(.+)$ ]]; then
            # 格式: registry/namespace/image:tag
            namespace="${BASH_REMATCH[2]}"
            if [[ ${BASH_REMATCH[3]} =~ : ]]; then
              image_name="${BASH_REMATCH[3]%%:*}"
              image_tag="${BASH_REMATCH[3]#*:}"
            else
              image_name="${BASH_REMATCH[3]}"
              image_tag="latest"
            fi
          elif [[ $image =~ ^([^/]+)/(.+)$ ]]; then
            # 格式: namespace/image:tag
            namespace="${BASH_REMATCH[1]}"
            if [[ ${BASH_REMATCH[2]} =~ : ]]; then
              image_name="${BASH_REMATCH[2]%%:*}"
              image_tag="${BASH_REMATCH[2]#*:}"
            else
              image_name="${BASH_REMATCH[2]}"
              image_tag="latest"
            fi
          else
            # 格式: image:tag
            namespace="library"
            if [[ $image =~ : ]]; then
              image_name="${image%%:*}"
              image_tag="${image#*:}"
            else
              image_name="$image"
              image_tag="latest"
            fi
          fi
          
          # 构建新的镜像名
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${namespace}_${image_name}:${image_tag}"
          
          echo "标记镜像: $image -> $new_image"
          docker tag $image $new_image
          
          echo "推送镜像: $new_image"
          docker push $new_image
          
          # 清理镜像
          docker rmi $image $new_image
          
          echo "完成处理: $line"
          echo "============================================="
        done < images.txt 
